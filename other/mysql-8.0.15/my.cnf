# mysql客户端设置
# 为所有的连接客户端工具，包括mysql命令行和msqldump等等
# 如果有[mysql]组的设置，则mysql命令行连接的优先使用[mysql]组的配置
[client]
default-character-set = utf8mb4

# mysql命令行设置
[mysql]
default-character-set = utf8mb4

# mysql服务端设置（mysqld表示mysqld进程）
[mysqld]
##########################################################################################################
# 数据库引擎与字符集相关设置

# mysql 5.1 之后，默认引擎就是InnoDB了
default_storage_engine = InnoDB

# 内存临时表默认引擎，默认InnoDB
default_tmp_storage_engine = InnoDB

# mysql 5.7新增特性，磁盘临时表默认引擎，默认InnoDB
internal_tmp_disk_storage_engine = InnoDB

# 数据库默认字符集,主流字符集支持一些特殊表情符号（特殊表情emoji符占用4个字节）
character-set-server = utf8mb4

# 数据库字符集对应一些排序等规则，注意要和character-set-server对应
collation-server = utf8mb4_unicode_ci

# 设置client连接mysql时的字符集,防止乱码
init-connect = 'set names utf8mb4'

# ps：查看数据库字符集与字符序：
# show variables where variable_name like '%character%' or variable_name  like '%collation%';
# 1. character_set_client：客户端来源数据使用的字符集
# 3. character_set_connection：连接层字符集
# 2. character_set_server：默认的内部操作字符集
# 4. character_set_results：查询结果字符集
# 5. character_set_database：当前选中数据库的默认字符集
# 6. character_set_system：系统元数据(字段名等)字符集

# MySQL中的字符集转换过程
# 1. MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；
# 2. 进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：
#     使用每个数据字段的CHARACTER SET设定值；
#     若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；
#     若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；
#     若上述值不存在，则使用character_set_server设定值。
# 3. 将操作结果从内部操作字符集转换为character_set_results。

##########################################################################################################
# 数据库时区设置

# 默认time-zone=system,即系统的时区。ps：设为0时区是为了统一时间
# ps：查看数据库时区：show variables like "%time_zone%";
default-time-zone = '+00:00'
